// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Game {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    blueTeam      Team        @relation("blueTeam", fields: [blueTeamId], references: [id])
    blueTeamId    String
    redTeam       Team        @relation("redTeam", fields: [redTeamId], references: [id])
    redTeamId     String
    draft         DraftStep[]
    isActiveDraft Boolean     @default(true)
}

model DraftStep {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    Game   Game        @relation(fields: [gameId], references: [id])
    gameId String
    type   PickBanType
    team   Team        @relation(fields: [teamId], references: [id])
    teamId String
}

enum PickBanType {
    Pick
    Ban
}

model Team {
    id        String      @id @default(cuid())
    name      String      @unique
    members   User[]
    blueGame  Game[]      @relation("blueTeam")
    redGame   Game[]      @relation("redTeam")
    DraftStep DraftStep[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Team          Team?     @relation(fields: [teamId], references: [id])
    teamId        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
